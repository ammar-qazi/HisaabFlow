name: Build and Release HisaabFlow

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate configs from templates
        shell: bash
        run: |
          cd configs
          for template in *.conf.template; do
            if [ -f "$template" ]; then
              conf_file="${template%.template}"
              echo "Converting $template -> $conf_file"
              cp "$template" "$conf_file"
            fi
          done
          ls -la *.conf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python (for Nuitka compilation)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Compile Backend with Nuitka (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Install Nuitka
          pip install nuitka
          
          # Install backend dependencies for compilation
          pip install -r backend/requirements.txt
          
          # Create output directory  
          New-Item -ItemType Directory -Force -Path "frontend/compiled-backend"
          
          # Compile backend to executable
          cd backend
          nuitka --onefile `
                 --include-data-dir=../configs=configs `
                 --include-package=fastapi `
                 --include-package=uvicorn `
                 --include-package=pydantic `
                 --include-package=pandas `
                 --output-dir=../frontend/compiled-backend `
                 --output-filename=hisaabflow-backend.exe `
                 main.py
          
          # Verify executable was created
          ls ../frontend/compiled-backend/

      - name: Compile Backend with Nuitka (Linux/macOS)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          # Install Nuitka
          pip install nuitka
          
          # Install backend dependencies for compilation
          pip install -r backend/requirements.txt
          
          # Create output directory  
          mkdir -p frontend/compiled-backend
          
          # Compile backend to executable
          cd backend
          nuitka --onefile \
                 --include-data-dir=../configs=configs \
                 --include-package=fastapi \
                 --include-package=uvicorn \
                 --include-package=pydantic \
                 --include-package=pandas \
                 --output-dir=../frontend/compiled-backend \
                 --output-filename=hisaabflow-backend \
                 main.py
          
          # Verify executable was created
          ls -la ../frontend/compiled-backend/

      - name: Build React app
        working-directory: frontend
        run: npm run build

      - name: Build Electron app (Linux)
        if: matrix.platform == 'linux'
        working-directory: frontend
        run: npm run build && npx electron-builder --linux --publish never

      - name: Build Electron app (macOS)
        if: matrix.platform == 'mac'
        working-directory: frontend
        run: npm run build && npx electron-builder --mac --publish never

      - name: Build Electron app (Windows)
        if: matrix.platform == 'windows'
        working-directory: frontend
        shell: pwsh
        run: |
          # Run electron-builder for Windows
          npm run build
          npx electron-builder --win --publish never

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hisaabflow-${{ matrix.platform }}
          path: |
            frontend/dist/*.AppImage
            frontend/dist/*.dmg
            frontend/dist/*.exe
          retention-days: 30
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
        
      - name: List downloaded artifacts (debug)
        run: |
          echo "Downloaded artifacts structure:"
          find ./artifacts -type f -name "*.AppImage" -o -name "*.dmg" -o -name "*.exe" || echo "No build artifacts found"
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./artifacts/**/*.AppImage
            ./artifacts/**/*.dmg
            ./artifacts/**/*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: false